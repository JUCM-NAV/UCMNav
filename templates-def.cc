// template definitions for gcc on Linux

#include "collection.h"
#include "collection.cc"

class Hyperedge;
class Path;
class HyperedgeFigure;
class Map;
class ResponsibilityFigure;
class Figure;
class DataStoreItem;
class Device;
class Label;
class Node;
class ExitPoint;	
class DataReference;
class StubBinding;
class PluginBinding;
class EntryPoint;
class ResponseTime;
class Component;
class ComponentReference;
class Handle;
class OrNullFigure;
class SynchNullFigure;
class Binding;
class Point;
class Trans_Rec;
class CompPoolListItem;
class Goal;
class GoalTag;
class Timestamp;
class BoundaryListItem;
class StubEntryExitList;
class _ColourDesc;
class ServiceRequest;
class Stub;
class Start;
class ContinuityBinding;
class UcmSetElement;
class UcmSet;
class ElementContext;
class BooleanVariable;
class VariableInit;
class Scenario;
class ScenarioGroup;
class VariableOperation;
class Timer;
class WaitContext;
class Path_data;
class Par;
class Seq;
class SCENARIOGenerator;
//class wait_pair;

template class LLItem<Hyperedge *>;
template class LLItem<Path *>;
template class LLItem<HyperedgeFigure *>;
template class LLItem<Map *>;
template class LLItem<ResponsibilityFigure *>;
template class LLItem<Figure *>;
template class LLItem<DataStoreItem *>;
template class LLItem<Device *>;
template class LLItem<Cltn<int> *>;
template class LLItem<Label *>;
template class LLItem<Node *>;
template class LLItem<ExitPoint *>;
template class LLItem<DataReference *>;
template class LLItem<StubBinding *>;
template class LLItem<PluginBinding *>;
template class LLItem<EntryPoint *>;
template class LLItem<ResponseTime *>;
template class LLItem<Component *>;
template class LLItem<ComponentReference *>;
template class LLItem<Handle *>;
template class LLItem<OrNullFigure *>;
template class LLItem<SynchNullFigure *>;
template class LLItem<CompPoolListItem *>;
template class LLItem<Goal *>;
template class LLItem<GoalTag *>;
template class LLItem<Timestamp *>;
template class LLItem<StubEntryExitList *>;
template class LLItem<ServiceRequest *>;
template class LLItem<Responsibility *>;
template class LLItem<ResponsibilityReference *>;
template class LLItem<_ColourDesc *>;
template class LLItem<Stub *>;
template class LLItem<Stub **>;
template class LLItem<Start *>;
template class LLItem<ContinuityBinding *>;
template class LLItem<UcmSetElement *>;
template class LLItem<UcmSet *>;
template class LLItem<BooleanVariable *>;
template class LLItem<Scenario *>;
template class LLItem<ScenarioGroup *>;
template class LLItem<VariableOperation *>;
template class LLItem<Timer *>;
template class LLItem<WaitContext *>;

template class LLItem<BoundaryListItem>;
template class LLItem<Binding>;
template class LLItem<Trans_Rec>;
template class LLItem<ElementContext *>;
template class LLItem<VariableInit *>;

template class LLItem<unsigned int>;
template class LLItem<int>;
template class LLItem<float>;
template class LLItem<char *>;

template class LLItem<Point *>;
template class LLItem<double>;

template class LLItem<Path_data *>;
template class LLItem<Seq *>;
//template class LLItem<wait_pair *>;

template class Cltn<ExitPoint *>;
template class Cltn<EntryPoint *>;
template class Cltn<StubBinding *>;
template class Cltn<PluginBinding *>;
template class Cltn<Hyperedge *>;
template class Cltn<HyperedgeFigure *>;
template class Cltn<Path *>;
template class Cltn<Figure *>;
template class Cltn<Label *>;
template class Cltn<Node *>;
template class Cltn<Component *>;
template class Cltn<ComponentReference *>;
template class Cltn<ResponsibilityFigure *>;
template class Cltn<OrNullFigure *>;
template class Cltn<SynchNullFigure *>;
template class Cltn<Handle *>;
template class Cltn<Map *>;
template class Cltn<DataStoreItem *>;
template class Cltn<DataReference *>;
template class Cltn<Device *>;
template class Cltn<ResponseTime *>;
template class Cltn<CompPoolListItem *>;
template class Cltn<Goal *>;
template class Cltn<GoalTag *>;
template class Cltn<Timestamp *>;
template class Cltn<StubEntryExitList *>;
template class Cltn<ServiceRequest *>;
template class Cltn<Responsibility *>;
template class Cltn<ResponsibilityReference *>;
template class Cltn<Stub *>;
template class Cltn<Stub **>;
template class Cltn<Start *>;
template class Cltn<ContinuityBinding *>;
template class Cltn<UcmSetElement *>;
template class Cltn<UcmSet *>;
template class Cltn<BooleanVariable *>;
template class Cltn<Scenario *>;
template class Cltn<ScenarioGroup *>;
template class Cltn<VariableOperation *>;
template class Cltn<Timer *>;
template class Cltn<WaitContext *>;

template class Cltn<Binding>;
template class Cltn<Trans_Rec>;
template class Cltn<BoundaryListItem>;
template class Cltn<ElementContext *>;
template class Cltn<VariableInit *>;

template class Cltn<float>;
template class Cltn<Cltn<int> *>;
template class Cltn<char *>;
template class Cltn<unsigned int>;
template class Cltn<int>;

template class Cltn<Point *>;
template class Cltn<_ColourDesc *>;
template class Cltn<double>;

template class Cltn<Path_data *>;
template class Cltn<Seq *>;
//template class Cltn<wait_pair *>;

